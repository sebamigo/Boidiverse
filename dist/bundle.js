/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./lib/js/victor/index.js":
/*!********************************!*\
  !*** ./lib/js/victor/index.js ***!
  \********************************/
/***/ ((module, exports) => {

eval("exports = module.exports = Victor;\n/**\n * # Victor - A JavaScript 2D vector class with methods for common vector operations\n */\n\n/**\n * Constructor. Will also work without the `new` keyword\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = Victor(42, 1337);\n *\n * @param {Number} x Value of the x axis\n * @param {Number} y Value of the y axis\n * @return {Victor}\n * @api public\n */\n\nfunction Victor(x, y) {\n  if (!(this instanceof Victor)) {\n    return new Victor(x, y);\n  }\n  /**\n   * The X axis\n   *\n   * ### Examples:\n   *     var vec = new Victor.fromArray(42, 21);\n   *\n   *     vec.x;\n   *     // => 42\n   *\n   * @api public\n   */\n\n\n  this.x = x || 0;\n  /**\n   * The Y axis\n   *\n   * ### Examples:\n   *     var vec = new Victor.fromArray(42, 21);\n   *\n   *     vec.y;\n   *     // => 21\n   *\n   * @api public\n   */\n\n  this.y = y || 0;\n}\n\n;\n/**\n * # Static\n */\n\n/**\n * Creates a new instance from an array\n *\n * ### Examples:\n *     var vec = Victor.fromArray([42, 21]);\n *\n *     vec.toString();\n *     // => x:42, y:21\n *\n * @name Victor.fromArray\n * @param {Array} array Array with the x and y values at index 0 and 1 respectively\n * @return {Victor} The new instance\n * @api public\n */\n\nVictor.fromArray = function (arr) {\n  return new Victor(arr[0] || 0, arr[1] || 0);\n};\n/**\n * Creates a new instance from an object\n *\n * ### Examples:\n *     var vec = Victor.fromObject({ x: 42, y: 21 });\n *\n *     vec.toString();\n *     // => x:42, y:21\n *\n * @name Victor.fromObject\n * @param {Object} obj Object with the values for x and y\n * @return {Victor} The new instance\n * @api public\n */\n\n\nVictor.fromObject = function (obj) {\n  return new Victor(obj.x || 0, obj.y || 0);\n};\n/**\n * # Manipulation\n *\n * These functions are chainable.\n */\n\n/**\n * Adds another vector's X axis to this one\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = new Victor(20, 30);\n *\n *     vec1.addX(vec2);\n *     vec1.toString();\n *     // => x:30, y:10\n *\n * @param {Victor} vector The other vector you want to add to this one\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\n\n\nVictor.prototype.addX = function (vec) {\n  this.x += vec.x;\n  return this;\n};\n/**\n * Adds another vector's Y axis to this one\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = new Victor(20, 30);\n *\n *     vec1.addY(vec2);\n *     vec1.toString();\n *     // => x:10, y:40\n *\n * @param {Victor} vector The other vector you want to add to this one\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\n\n\nVictor.prototype.addY = function (vec) {\n  this.y += vec.y;\n  return this;\n};\n/**\n * Adds another vector to this one\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = new Victor(20, 30);\n *\n *     vec1.add(vec2);\n *     vec1.toString();\n *     // => x:30, y:40\n *\n * @param {Victor} vector The other vector you want to add to this one\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\n\n\nVictor.prototype.add = function (vec) {\n  this.x += vec.x;\n  this.y += vec.y;\n  return this;\n};\n/**\n * Adds the given scalar to both vector axis\n *\n * ### Examples:\n *     var vec = new Victor(1, 2);\n *\n *     vec.addScalar(2);\n *     vec.toString();\n *     // => x: 3, y: 4\n *\n * @param {Number} scalar The scalar to add\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\n\n\nVictor.prototype.addScalar = function (scalar) {\n  this.x += scalar;\n  this.y += scalar;\n  return this;\n};\n/**\n * Adds the given scalar to the X axis\n *\n * ### Examples:\n *     var vec = new Victor(1, 2);\n *\n *     vec.addScalarX(2);\n *     vec.toString();\n *     // => x: 3, y: 2\n *\n * @param {Number} scalar The scalar to add\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\n\n\nVictor.prototype.addScalarX = function (scalar) {\n  this.x += scalar;\n  return this;\n};\n/**\n * Adds the given scalar to the Y axis\n *\n * ### Examples:\n *     var vec = new Victor(1, 2);\n *\n *     vec.addScalarY(2);\n *     vec.toString();\n *     // => x: 1, y: 4\n *\n * @param {Number} scalar The scalar to add\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\n\n\nVictor.prototype.addScalarY = function (scalar) {\n  this.y += scalar;\n  return this;\n};\n/**\n * Subtracts the X axis of another vector from this one\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(20, 30);\n *\n *     vec1.subtractX(vec2);\n *     vec1.toString();\n *     // => x:80, y:50\n *\n * @param {Victor} vector The other vector you want subtract from this one\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\n\n\nVictor.prototype.subtractX = function (vec) {\n  this.x -= vec.x;\n  return this;\n};\n/**\n * Subtracts the Y axis of another vector from this one\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(20, 30);\n *\n *     vec1.subtractY(vec2);\n *     vec1.toString();\n *     // => x:100, y:20\n *\n * @param {Victor} vector The other vector you want subtract from this one\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\n\n\nVictor.prototype.subtractY = function (vec) {\n  this.y -= vec.y;\n  return this;\n};\n/**\n * Subtracts another vector from this one\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(20, 30);\n *\n *     vec1.subtract(vec2);\n *     vec1.toString();\n *     // => x:80, y:20\n *\n * @param {Victor} vector The other vector you want subtract from this one\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\n\n\nVictor.prototype.subtract = function (vec) {\n  this.x -= vec.x;\n  this.y -= vec.y;\n  return this;\n};\n/**\n * Subtracts the given scalar from both axis\n *\n * ### Examples:\n *     var vec = new Victor(100, 200);\n *\n *     vec.subtractScalar(20);\n *     vec.toString();\n *     // => x: 80, y: 180\n *\n * @param {Number} scalar The scalar to subtract\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\n\n\nVictor.prototype.subtractScalar = function (scalar) {\n  this.x -= scalar;\n  this.y -= scalar;\n  return this;\n};\n/**\n * Subtracts the given scalar from the X axis\n *\n * ### Examples:\n *     var vec = new Victor(100, 200);\n *\n *     vec.subtractScalarX(20);\n *     vec.toString();\n *     // => x: 80, y: 200\n *\n * @param {Number} scalar The scalar to subtract\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\n\n\nVictor.prototype.subtractScalarX = function (scalar) {\n  this.x -= scalar;\n  return this;\n};\n/**\n * Subtracts the given scalar from the Y axis\n *\n * ### Examples:\n *     var vec = new Victor(100, 200);\n *\n *     vec.subtractScalarY(20);\n *     vec.toString();\n *     // => x: 100, y: 180\n *\n * @param {Number} scalar The scalar to subtract\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\n\n\nVictor.prototype.subtractScalarY = function (scalar) {\n  this.y -= scalar;\n  return this;\n};\n/**\n * Divides the X axis by the x component of given vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     var vec2 = new Victor(2, 0);\n *\n *     vec.divideX(vec2);\n *     vec.toString();\n *     // => x:50, y:50\n *\n * @param {Victor} vector The other vector you want divide by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\n\n\nVictor.prototype.divideX = function (vector) {\n  this.x /= vector.x;\n  return this;\n};\n/**\n * Divides the Y axis by the y component of given vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     var vec2 = new Victor(0, 2);\n *\n *     vec.divideY(vec2);\n *     vec.toString();\n *     // => x:100, y:25\n *\n * @param {Victor} vector The other vector you want divide by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\n\n\nVictor.prototype.divideY = function (vector) {\n  this.y /= vector.y;\n  return this;\n};\n/**\n * Divides both vector axis by a axis values of given vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     var vec2 = new Victor(2, 2);\n *\n *     vec.divide(vec2);\n *     vec.toString();\n *     // => x:50, y:25\n *\n * @param {Victor} vector The vector to divide by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\n\n\nVictor.prototype.divide = function (vector) {\n  this.x /= vector.x;\n  this.y /= vector.y;\n  return this;\n};\n/**\n * Divides both vector axis by the given scalar value\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.divideScalar(2);\n *     vec.toString();\n *     // => x:50, y:25\n *\n * @param {Number} The scalar to divide by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\n\n\nVictor.prototype.divideScalar = function (scalar) {\n  if (scalar !== 0) {\n    this.x /= scalar;\n    this.y /= scalar;\n  } else {\n    this.x = 0;\n    this.y = 0;\n  }\n\n  return this;\n};\n/**\n * Divides the X axis by the given scalar value\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.divideScalarX(2);\n *     vec.toString();\n *     // => x:50, y:50\n *\n * @param {Number} The scalar to divide by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\n\n\nVictor.prototype.divideScalarX = function (scalar) {\n  if (scalar !== 0) {\n    this.x /= scalar;\n  } else {\n    this.x = 0;\n  }\n\n  return this;\n};\n/**\n * Divides the Y axis by the given scalar value\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.divideScalarY(2);\n *     vec.toString();\n *     // => x:100, y:25\n *\n * @param {Number} The scalar to divide by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\n\n\nVictor.prototype.divideScalarY = function (scalar) {\n  if (scalar !== 0) {\n    this.y /= scalar;\n  } else {\n    this.y = 0;\n  }\n\n  return this;\n};\n/**\n * Inverts the X axis\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.invertX();\n *     vec.toString();\n *     // => x:-100, y:50\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\n\n\nVictor.prototype.invertX = function () {\n  this.x *= -1;\n  return this;\n};\n/**\n * Inverts the Y axis\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.invertY();\n *     vec.toString();\n *     // => x:100, y:-50\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\n\n\nVictor.prototype.invertY = function () {\n  this.y *= -1;\n  return this;\n};\n/**\n * Inverts both axis\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.invert();\n *     vec.toString();\n *     // => x:-100, y:-50\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\n\n\nVictor.prototype.invert = function () {\n  this.invertX();\n  this.invertY();\n  return this;\n};\n/**\n * Multiplies the X axis by X component of given vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     var vec2 = new Victor(2, 0);\n *\n *     vec.multiplyX(vec2);\n *     vec.toString();\n *     // => x:200, y:50\n *\n * @param {Victor} vector The vector to multiply the axis with\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\n\n\nVictor.prototype.multiplyX = function (vector) {\n  this.x *= vector.x;\n  return this;\n};\n/**\n * Multiplies the Y axis by Y component of given vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     var vec2 = new Victor(0, 2);\n *\n *     vec.multiplyX(vec2);\n *     vec.toString();\n *     // => x:100, y:100\n *\n * @param {Victor} vector The vector to multiply the axis with\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\n\n\nVictor.prototype.multiplyY = function (vector) {\n  this.y *= vector.y;\n  return this;\n};\n/**\n * Multiplies both vector axis by values from a given vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     var vec2 = new Victor(2, 2);\n *\n *     vec.multiply(vec2);\n *     vec.toString();\n *     // => x:200, y:100\n *\n * @param {Victor} vector The vector to multiply by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\n\n\nVictor.prototype.multiply = function (vector) {\n  this.x *= vector.x;\n  this.y *= vector.y;\n  return this;\n};\n/**\n * Multiplies both vector axis by the given scalar value\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.multiplyScalar(2);\n *     vec.toString();\n *     // => x:200, y:100\n *\n * @param {Number} The scalar to multiply by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\n\n\nVictor.prototype.multiplyScalar = function (scalar) {\n  this.x *= scalar;\n  this.y *= scalar;\n  return this;\n};\n/**\n * Multiplies the X axis by the given scalar\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.multiplyScalarX(2);\n *     vec.toString();\n *     // => x:200, y:50\n *\n * @param {Number} The scalar to multiply the axis with\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\n\n\nVictor.prototype.multiplyScalarX = function (scalar) {\n  this.x *= scalar;\n  return this;\n};\n/**\n * Multiplies the Y axis by the given scalar\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.multiplyScalarY(2);\n *     vec.toString();\n *     // => x:100, y:100\n *\n * @param {Number} The scalar to multiply the axis with\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\n\n\nVictor.prototype.multiplyScalarY = function (scalar) {\n  this.y *= scalar;\n  return this;\n};\n/**\n * Normalize\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\n\n\nVictor.prototype.normalize = function () {\n  var length = this.length();\n\n  if (length === 0) {\n    this.x = 1;\n    this.y = 0;\n  } else {\n    this.divide(Victor(length, length));\n  }\n\n  return this;\n};\n\nVictor.prototype.norm = Victor.prototype.normalize;\n/**\n * If the absolute vector axis is greater than `max`, multiplies the axis by `factor`\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.limit(80, 0.9);\n *     vec.toString();\n *     // => x:90, y:50\n *\n * @param {Number} max The maximum value for both x and y axis\n * @param {Number} factor Factor by which the axis are to be multiplied with\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\n\nVictor.prototype.limit = function (max, factor) {\n  if (Math.abs(this.x) > max) {\n    this.x *= factor;\n  }\n\n  if (Math.abs(this.y) > max) {\n    this.y *= factor;\n  }\n\n  return this;\n};\n/**\n * Randomizes both vector axis with a value between 2 vectors\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.randomize(new Victor(50, 60), new Victor(70, 80`));\n *     vec.toString();\n *     // => x:67, y:73\n *\n * @param {Victor} topLeft first vector\n * @param {Victor} bottomRight second vector\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\n\n\nVictor.prototype.randomize = function (topLeft, bottomRight) {\n  this.randomizeX(topLeft, bottomRight);\n  this.randomizeY(topLeft, bottomRight);\n  return this;\n};\n/**\n * Randomizes the y axis with a value between 2 vectors\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.randomizeX(new Victor(50, 60), new Victor(70, 80`));\n *     vec.toString();\n *     // => x:55, y:50\n *\n * @param {Victor} topLeft first vector\n * @param {Victor} bottomRight second vector\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\n\n\nVictor.prototype.randomizeX = function (topLeft, bottomRight) {\n  var min = Math.min(topLeft.x, bottomRight.x);\n  var max = Math.max(topLeft.x, bottomRight.x);\n  this.x = random(min, max);\n  return this;\n};\n/**\n * Randomizes the y axis with a value between 2 vectors\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.randomizeY(new Victor(50, 60), new Victor(70, 80`));\n *     vec.toString();\n *     // => x:100, y:66\n *\n * @param {Victor} topLeft first vector\n * @param {Victor} bottomRight second vector\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\n\n\nVictor.prototype.randomizeY = function (topLeft, bottomRight) {\n  var min = Math.min(topLeft.y, bottomRight.y);\n  var max = Math.max(topLeft.y, bottomRight.y);\n  this.y = random(min, max);\n  return this;\n};\n/**\n * Randomly randomizes either axis between 2 vectors\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.randomizeAny(new Victor(50, 60), new Victor(70, 80));\n *     vec.toString();\n *     // => x:100, y:77\n *\n * @param {Victor} topLeft first vector\n * @param {Victor} bottomRight second vector\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\n\n\nVictor.prototype.randomizeAny = function (topLeft, bottomRight) {\n  if (!!Math.round(Math.random())) {\n    this.randomizeX(topLeft, bottomRight);\n  } else {\n    this.randomizeY(topLeft, bottomRight);\n  }\n\n  return this;\n};\n/**\n * Rounds both axis to an integer value\n *\n * ### Examples:\n *     var vec = new Victor(100.2, 50.9);\n *\n *     vec.unfloat();\n *     vec.toString();\n *     // => x:100, y:51\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\n\n\nVictor.prototype.unfloat = function () {\n  this.x = Math.round(this.x);\n  this.y = Math.round(this.y);\n  return this;\n};\n/**\n * Rounds both axis to a certain precision\n *\n * ### Examples:\n *     var vec = new Victor(100.2, 50.9);\n *\n *     vec.unfloat();\n *     vec.toString();\n *     // => x:100, y:51\n *\n * @param {Number} Precision (default: 8)\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\n\n\nVictor.prototype.toFixed = function (precision) {\n  if (typeof precision === 'undefined') {\n    precision = 8;\n  }\n\n  this.x = this.x.toFixed(precision);\n  this.y = this.y.toFixed(precision);\n  return this;\n};\n/**\n * Performs a linear blend / interpolation of the X axis towards another vector\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 100);\n *     var vec2 = new Victor(200, 200);\n *\n *     vec1.mixX(vec2, 0.5);\n *     vec.toString();\n *     // => x:150, y:100\n *\n * @param {Victor} vector The other vector\n * @param {Number} amount The blend amount (optional, default: 0.5)\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\n\n\nVictor.prototype.mixX = function (vec, amount) {\n  if (typeof amount === 'undefined') {\n    amount = 0.5;\n  }\n\n  this.x = (1 - amount) * this.x + amount * vec.x;\n  return this;\n};\n/**\n * Performs a linear blend / interpolation of the Y axis towards another vector\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 100);\n *     var vec2 = new Victor(200, 200);\n *\n *     vec1.mixY(vec2, 0.5);\n *     vec.toString();\n *     // => x:100, y:150\n *\n * @param {Victor} vector The other vector\n * @param {Number} amount The blend amount (optional, default: 0.5)\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\n\n\nVictor.prototype.mixY = function (vec, amount) {\n  if (typeof amount === 'undefined') {\n    amount = 0.5;\n  }\n\n  this.y = (1 - amount) * this.y + amount * vec.y;\n  return this;\n};\n/**\n * Performs a linear blend / interpolation towards another vector\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 100);\n *     var vec2 = new Victor(200, 200);\n *\n *     vec1.mix(vec2, 0.5);\n *     vec.toString();\n *     // => x:150, y:150\n *\n * @param {Victor} vector The other vector\n * @param {Number} amount The blend amount (optional, default: 0.5)\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\n\n\nVictor.prototype.mix = function (vec, amount) {\n  this.mixX(vec, amount);\n  this.mixY(vec, amount);\n  return this;\n};\n/**\n * # Products\n */\n\n/**\n * Creates a clone of this vector\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = vec1.clone();\n *\n *     vec2.toString();\n *     // => x:10, y:10\n *\n * @return {Victor} A clone of the vector\n * @api public\n */\n\n\nVictor.prototype.clone = function () {\n  return new Victor(this.x, this.y);\n};\n/**\n * Copies another vector's X component in to its own\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = new Victor(20, 20);\n *     var vec2 = vec1.copyX(vec1);\n *\n *     vec2.toString();\n *     // => x:20, y:10\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\n\n\nVictor.prototype.copyX = function (vec) {\n  this.x = vec.x;\n  return this;\n};\n/**\n * Copies another vector's Y component in to its own\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = new Victor(20, 20);\n *     var vec2 = vec1.copyY(vec1);\n *\n *     vec2.toString();\n *     // => x:10, y:20\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\n\n\nVictor.prototype.copyY = function (vec) {\n  this.y = vec.y;\n  return this;\n};\n/**\n * Copies another vector's X and Y components in to its own\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = new Victor(20, 20);\n *     var vec2 = vec1.copy(vec1);\n *\n *     vec2.toString();\n *     // => x:20, y:20\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\n\n\nVictor.prototype.copy = function (vec) {\n  this.copyX(vec);\n  this.copyY(vec);\n  return this;\n};\n/**\n * Sets the vector to zero (0,0)\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *\t\t var1.zero();\n *     vec1.toString();\n *     // => x:0, y:0\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\n\n\nVictor.prototype.zero = function () {\n  this.x = this.y = 0;\n  return this;\n};\n/**\n * Calculates the dot product of this vector and another\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.dot(vec2);\n *     // => 23000\n *\n * @param {Victor} vector The second vector\n * @return {Number} Dot product\n * @api public\n */\n\n\nVictor.prototype.dot = function (vec2) {\n  return this.x * vec2.x + this.y * vec2.y;\n};\n\nVictor.prototype.cross = function (vec2) {\n  return this.x * vec2.y - this.y * vec2.x;\n};\n/**\n * Projects a vector onto another vector, setting itself to the result.\n *\n * ### Examples:\n *     var vec = new Victor(100, 0);\n *     var vec2 = new Victor(100, 100);\n *\n *     vec.projectOnto(vec2);\n *     vec.toString();\n *     // => x:50, y:50\n *\n * @param {Victor} vector The other vector you want to project this vector onto\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\n\n\nVictor.prototype.projectOnto = function (vec2) {\n  var coeff = (this.x * vec2.x + this.y * vec2.y) / (vec2.x * vec2.x + vec2.y * vec2.y);\n  this.x = coeff * vec2.x;\n  this.y = coeff * vec2.y;\n  return this;\n};\n\nVictor.prototype.horizontalAngle = function () {\n  return Math.atan2(this.y, this.x);\n};\n\nVictor.prototype.horizontalAngleDeg = function () {\n  return radian2degrees(this.horizontalAngle());\n};\n\nVictor.prototype.verticalAngle = function () {\n  return Math.atan2(this.x, this.y);\n};\n\nVictor.prototype.verticalAngleDeg = function () {\n  return radian2degrees(this.verticalAngle());\n};\n\nVictor.prototype.angle = Victor.prototype.horizontalAngle;\nVictor.prototype.angleDeg = Victor.prototype.horizontalAngleDeg;\nVictor.prototype.direction = Victor.prototype.horizontalAngle;\n\nVictor.prototype.rotate = function (angle) {\n  var nx = this.x * Math.cos(angle) - this.y * Math.sin(angle);\n  var ny = this.x * Math.sin(angle) + this.y * Math.cos(angle);\n  this.x = nx;\n  this.y = ny;\n  return this;\n};\n\nVictor.prototype.rotateDeg = function (angle) {\n  angle = degrees2radian(angle);\n  return this.rotate(angle);\n};\n\nVictor.prototype.rotateTo = function (rotation) {\n  return this.rotate(rotation - this.angle());\n};\n\nVictor.prototype.rotateToDeg = function (rotation) {\n  rotation = degrees2radian(rotation);\n  return this.rotateTo(rotation);\n};\n\nVictor.prototype.rotateBy = function (rotation) {\n  var angle = this.angle() + rotation;\n  return this.rotate(angle);\n};\n\nVictor.prototype.rotateByDeg = function (rotation) {\n  rotation = degrees2radian(rotation);\n  return this.rotateBy(rotation);\n};\n/**\n * Calculates the distance of the X axis between this vector and another\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.distanceX(vec2);\n *     // => -100\n *\n * @param {Victor} vector The second vector\n * @return {Number} Distance\n * @api public\n */\n\n\nVictor.prototype.distanceX = function (vec) {\n  return this.x - vec.x;\n};\n/**\n * Same as `distanceX()` but always returns an absolute number\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.absDistanceX(vec2);\n *     // => 100\n *\n * @param {Victor} vector The second vector\n * @return {Number} Absolute distance\n * @api public\n */\n\n\nVictor.prototype.absDistanceX = function (vec) {\n  return Math.abs(this.distanceX(vec));\n};\n/**\n * Calculates the distance of the Y axis between this vector and another\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.distanceY(vec2);\n *     // => -10\n *\n * @param {Victor} vector The second vector\n * @return {Number} Distance\n * @api public\n */\n\n\nVictor.prototype.distanceY = function (vec) {\n  return this.y - vec.y;\n};\n/**\n * Same as `distanceY()` but always returns an absolute number\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.distanceY(vec2);\n *     // => 10\n *\n * @param {Victor} vector The second vector\n * @return {Number} Absolute distance\n * @api public\n */\n\n\nVictor.prototype.absDistanceY = function (vec) {\n  return Math.abs(this.distanceY(vec));\n};\n/**\n * Calculates the euclidean distance between this vector and another\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.distance(vec2);\n *     // => 100.4987562112089\n *\n * @param {Victor} vector The second vector\n * @return {Number} Distance\n * @api public\n */\n\n\nVictor.prototype.distance = function (vec) {\n  return Math.sqrt(this.distanceSq(vec));\n};\n/**\n * Calculates the squared euclidean distance between this vector and another\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.distanceSq(vec2);\n *     // => 10100\n *\n * @param {Victor} vector The second vector\n * @return {Number} Distance\n * @api public\n */\n\n\nVictor.prototype.distanceSq = function (vec) {\n  var dx = this.distanceX(vec),\n      dy = this.distanceY(vec);\n  return dx * dx + dy * dy;\n};\n/**\n * Calculates the length or magnitude of the vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.length();\n *     // => 111.80339887498948\n *\n * @return {Number} Length / Magnitude\n * @api public\n */\n\n\nVictor.prototype.length = function () {\n  return Math.sqrt(this.lengthSq());\n};\n/**\n * Squared length / magnitude\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.lengthSq();\n *     // => 12500\n *\n * @return {Number} Length / Magnitude\n * @api public\n */\n\n\nVictor.prototype.lengthSq = function () {\n  return this.x * this.x + this.y * this.y;\n};\n\nVictor.prototype.magnitude = Victor.prototype.length;\n/**\n * Returns a true if vector is (0, 0)\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     vec.zero();\n *\n *     // => true\n *\n * @return {Boolean}\n * @api public\n */\n\nVictor.prototype.isZero = function () {\n  return this.x === 0 && this.y === 0;\n};\n/**\n * Returns a true if this vector is the same as another\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(100, 50);\n *     vec1.isEqualTo(vec2);\n *\n *     // => true\n *\n * @return {Boolean}\n * @api public\n */\n\n\nVictor.prototype.isEqualTo = function (vec2) {\n  return this.x === vec2.x && this.y === vec2.y;\n};\n/**\n * # Utility Methods\n */\n\n/**\n * Returns an string representation of the vector\n *\n * ### Examples:\n *     var vec = new Victor(10, 20);\n *\n *     vec.toString();\n *     // => x:10, y:20\n *\n * @return {String}\n * @api public\n */\n\n\nVictor.prototype.toString = function () {\n  return 'x:' + this.x + ', y:' + this.y;\n};\n/**\n * Returns an array representation of the vector\n *\n * ### Examples:\n *     var vec = new Victor(10, 20);\n *\n *     vec.toArray();\n *     // => [10, 20]\n *\n * @return {Array}\n * @api public\n */\n\n\nVictor.prototype.toArray = function () {\n  return [this.x, this.y];\n};\n/**\n * Returns an object representation of the vector\n *\n * ### Examples:\n *     var vec = new Victor(10, 20);\n *\n *     vec.toObject();\n *     // => { x: 10, y: 20 }\n *\n * @return {Object}\n * @api public\n */\n\n\nVictor.prototype.toObject = function () {\n  return {\n    x: this.x,\n    y: this.y\n  };\n};\n\nvar degrees = 180 / Math.PI;\n\nfunction random(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction radian2degrees(rad) {\n  return rad * degrees;\n}\n\nfunction degrees2radian(deg) {\n  return deg / degrees;\n}\n\n//# sourceURL=webpack://boidiverse/./lib/js/victor/index.js?");

/***/ }),

/***/ "./src/js/boid.js":
/*!************************!*\
  !*** ./src/js/boid.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Boid\": () => (/* binding */ Boid)\n/* harmony export */ });\n/* harmony import */ var _lib_js_victor_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/js/victor/index */ \"./lib/js/victor/index.js\");\n/* harmony import */ var _lib_js_victor_index__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_lib_js_victor_index__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants */ \"./src/js/constants.js\");\n/* harmony import */ var _direction__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./direction */ \"./src/js/direction.js\");\n\n\n\nvar Boid = function Boid(global_position_vector, direction_vector) {\n  var _this = this;\n\n  this.chunk_pos_vec = 0;\n  this.pos_vec = global_position_vector;\n  this.direction = new _direction__WEBPACK_IMPORTED_MODULE_2__.Direction(direction_vector);\n  this.speed_vec = new (_lib_js_victor_index__WEBPACK_IMPORTED_MODULE_0___default())(_constants__WEBPACK_IMPORTED_MODULE_1__.BOID_DEFAULT_SPEED_X, _constants__WEBPACK_IMPORTED_MODULE_1__.BOID_DEFAULT_SPEED_Y);\n  this.color = \"#000000\";\n  this.shape = _constants__WEBPACK_IMPORTED_MODULE_1__.SHAPE_TRIANGLE;\n};\n\n//# sourceURL=webpack://boidiverse/./src/js/boid.js?");

/***/ }),

/***/ "./src/js/boidcanvas.js":
/*!******************************!*\
  !*** ./src/js/boidcanvas.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Boidcanvas\": () => (/* binding */ Boidcanvas)\n/* harmony export */ });\n/* harmony import */ var _boidiverse__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./boidiverse */ \"./src/js/boidiverse.js\");\n\nvar Boidcanvas = function Boidcanvas(canvas_element) {\n  this.init = function (canvas_size) {\n    _this.canvas.width = canvas_size.x;\n    _this.canvas.height = canvas_size.y;\n    _this.boidiverse = new _boidiverse__WEBPACK_IMPORTED_MODULE_0__.Boidiverse(); //_this.boidcontroller = new Boidcontroller();\n\n    _this.loop();\n  };\n\n  var _this = this;\n\n  this.canvas = canvas_element;\n  this.ctx = this.canvas.getContext(\"2d\");\n  this.stop = false;\n\n  this.loop = function () {\n    var lastTime;\n    var requiredElapsed = 1000 / 60;\n\n    var loopIt = function loopIt(now) {\n      if (_this.stop) {\n        return;\n      }\n\n      requestAnimationFrame(loopIt);\n\n      if (!lastTime) {\n        lastTime = now;\n      }\n\n      var elapsed = now - lastTime;\n\n      if (elapsed > requiredElapsed) {\n        var timedelta = elapsed / 1000;\n\n        _this.updateBounds();\n\n        _this.clearCanvas(); //TODO\n        //_this.boidcontroller.update(timedelta);\n\n\n        _this.boidiverse.draw(_this.ctx);\n\n        lastTime = now;\n      }\n    };\n\n    loopIt();\n  };\n\n  this.updateBounds = function () {\n    var w = window.innerWidth;\n    var h = window.innerWidth;\n\n    if (w !== _this.canvas.width || h !== _this.canvas.height) {\n      _this.canvas.width = w;\n      _this.canvas.height = h; //_this.boidiverse.chunkgrid.buildChunks(_this.cw, _this.ch);\n    }\n  };\n\n  this.clearCanvas = function () {\n    _this.ctx.globalCompositeOperation = 'destination-over';\n\n    _this.ctx.clearRect(0, 0, _this.canvas.width, _this.canvas.height); // clear canvas\n\n  };\n};\n\n//# sourceURL=webpack://boidiverse/./src/js/boidcanvas.js?");

/***/ }),

/***/ "./src/js/boidiverse.js":
/*!******************************!*\
  !*** ./src/js/boidiverse.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Boidiverse\": () => (/* binding */ Boidiverse)\n/* harmony export */ });\n/* harmony import */ var _boid__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./boid */ \"./src/js/boid.js\");\n/* harmony import */ var _lib_js_victor_index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/js/victor/index */ \"./lib/js/victor/index.js\");\n/* harmony import */ var _lib_js_victor_index__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_lib_js_victor_index__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _drawer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./drawer */ \"./src/js/drawer.js\");\n/* harmony import */ var _parameters__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./parameters */ \"./src/js/parameters.js\");\n/* harmony import */ var _misc__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./misc */ \"./src/js/misc.js\");\n\n\n\n\n\nvar Boidiverse = function Boidiverse() {\n  var _this = this;\n\n  this.boids = new Map();\n\n  this.forEachBoid = function (iterateFunction) {\n    _this.boids.forEach(iterateFunction);\n  };\n\n  this.draw = function (ctx) {\n    _this.forEachBoid(function (boid) {\n      ctx.translate(boid.pos_vec.x, boid.pos_vec.y);\n      ctx.rotate(boid.direction.getDirection() * boid.direction.getAngle());\n      _drawer__WEBPACK_IMPORTED_MODULE_2__.drawShape(ctx, boid.shape);\n      ctx.setTransform(1, 0, 0, 1, 0, 0); // reset transformation\n    });\n\n    if (_parameters__WEBPACK_IMPORTED_MODULE_3__.DEBUG_DRAWGRID === true) {//_this.boidiverse.chunkgrid.drawChunkGrid(_this.ctx);\n    }\n  };\n};\n\n//# sourceURL=webpack://boidiverse/./src/js/boidiverse.js?");

/***/ }),

/***/ "./src/js/constants.js":
/*!*****************************!*\
  !*** ./src/js/constants.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"BOID_DEFAULT_SPEED_X\": () => (/* binding */ BOID_DEFAULT_SPEED_X),\n/* harmony export */   \"BOID_DEFAULT_SPEED_Y\": () => (/* binding */ BOID_DEFAULT_SPEED_Y),\n/* harmony export */   \"SHAPE_TRIANGLE\": () => (/* binding */ SHAPE_TRIANGLE),\n/* harmony export */   \"VECTOR_X\": () => (/* binding */ VECTOR_X)\n/* harmony export */ });\n/* harmony import */ var _lib_js_victor_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/js/victor/index */ \"./lib/js/victor/index.js\");\n/* harmony import */ var _lib_js_victor_index__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_lib_js_victor_index__WEBPACK_IMPORTED_MODULE_0__);\n\nvar BOID_DEFAULT_SPEED_X = 100;\nvar BOID_DEFAULT_SPEED_Y = 0;\nvar SHAPE_TRIANGLE = 0;\nvar VECTOR_X = new (_lib_js_victor_index__WEBPACK_IMPORTED_MODULE_0___default())(-1, 0);\n\n//# sourceURL=webpack://boidiverse/./src/js/constants.js?");

/***/ }),

/***/ "./src/js/direction.js":
/*!*****************************!*\
  !*** ./src/js/direction.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Direction\": () => (/* binding */ Direction)\n/* harmony export */ });\n/* harmony import */ var _lib_js_victor_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/js/victor/index */ \"./lib/js/victor/index.js\");\n/* harmony import */ var _lib_js_victor_index__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_lib_js_victor_index__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants */ \"./src/js/constants.js\");\n\n\nvar Direction = function Direction(direction_vector) {\n  var _this = this;\n\n  this.calculateAngle = function (direction_vector) {\n    return Math.acos(direction_vector.dot(_constants__WEBPACK_IMPORTED_MODULE_1__.VECTOR_X) / (direction_vector.length() * _constants__WEBPACK_IMPORTED_MODULE_1__.VECTOR_X.length()));\n  };\n\n  this.calculateDirection = function (direction_vector) {\n    return direction_vector.cross(_constants__WEBPACK_IMPORTED_MODULE_1__.VECTOR_X) < 0.0 ? 1 : -1;\n  };\n\n  this.setDirection_vector = function (direction_vector) {\n    _this.dir_vec = direction_vector;\n    _this.angle = calculateAngle(direction_vector);\n    _this.direction = calculateDirection(direction_vector);\n  };\n\n  this.getDirection_vector = function () {\n    return _this.dir_vec;\n  };\n\n  this.getAngle = function () {\n    return _this.angle;\n  };\n\n  this.getDirection = function () {\n    return _this.direction;\n  };\n\n  this.dir_vec = direction_vector;\n  this.angle = _this.calculateAngle(direction_vector);\n  this.direction = _this.calculateDirection(direction_vector);\n};\n\n//# sourceURL=webpack://boidiverse/./src/js/direction.js?");

/***/ }),

/***/ "./src/js/drawer.js":
/*!**************************!*\
  !*** ./src/js/drawer.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"drawShape\": () => (/* binding */ drawShape)\n/* harmony export */ });\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */ \"./src/js/constants.js\");\n/* harmony import */ var _shapes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./shapes */ \"./src/js/shapes.js\");\n\n\nvar drawShape = function drawShape(ctx, shape) {\n  switch (shape) {\n    case _constants__WEBPACK_IMPORTED_MODULE_0__.SHAPE_TRIANGLE:\n      _shapes__WEBPACK_IMPORTED_MODULE_1__.triangle(ctx);\n      break;\n\n    default:\n      console.log(\"Shape is not defined!\");\n      break;\n  }\n};\n\n//# sourceURL=webpack://boidiverse/./src/js/drawer.js?");

/***/ }),

/***/ "./src/js/main.js":
/*!************************!*\
  !*** ./src/js/main.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _lib_js_victor_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/js/victor/index */ \"./lib/js/victor/index.js\");\n/* harmony import */ var _lib_js_victor_index__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_lib_js_victor_index__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _boid__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./boid */ \"./src/js/boid.js\");\n/* harmony import */ var _boidcanvas__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./boidcanvas */ \"./src/js/boidcanvas.js\");\n\n\n\nvar boids_div = document.getElementById(\"boids-js\");\nvar can = document.createElement(\"canvas\");\ncan.id = \"boids-js-canvas\";\nboids_div.appendChild(can);\nvar cb = new _boidcanvas__WEBPACK_IMPORTED_MODULE_2__.Boidcanvas(can);\ncb.init(new (_lib_js_victor_index__WEBPACK_IMPORTED_MODULE_0___default())(window.innerWidth, window.innerHeight));\nvar b = new _boid__WEBPACK_IMPORTED_MODULE_1__.Boid(new (_lib_js_victor_index__WEBPACK_IMPORTED_MODULE_0___default())(100, 100), new (_lib_js_victor_index__WEBPACK_IMPORTED_MODULE_0___default())(0, 0));\ncb.boidiverse.boids.set(0, b);\nconsole.log(b);\nvar i = 0;\n\nfor (var x = -5; x < 5; x++) {\n  for (var y = -5; y < 5; y++) {\n    cb.boidiverse.boids.set(i++, new _boid__WEBPACK_IMPORTED_MODULE_1__.Boid(new (_lib_js_victor_index__WEBPACK_IMPORTED_MODULE_0___default())(100 + 10 * x, 100 + 10 * y), new (_lib_js_victor_index__WEBPACK_IMPORTED_MODULE_0___default())(x, y)));\n  }\n}\n\n//# sourceURL=webpack://boidiverse/./src/js/main.js?");

/***/ }),

/***/ "./src/js/misc.js":
/*!************************!*\
  !*** ./src/js/misc.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"degToRad\": () => (/* binding */ degToRad),\n/* harmony export */   \"radToDeg\": () => (/* binding */ radToDeg),\n/* harmony export */   \"distance\": () => (/* binding */ distance)\n/* harmony export */ });\nvar degToRad = function degToRad(deg) {\n  return deg * Math.PI / 180;\n};\nvar radToDeg = function radToDeg(rad) {\n  return rad * (180 / Math.PI);\n};\nvar distance = function distance(x1, y1, x2, y2) {\n  return Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));\n};\n\n//# sourceURL=webpack://boidiverse/./src/js/misc.js?");

/***/ }),

/***/ "./src/js/parameters.js":
/*!******************************!*\
  !*** ./src/js/parameters.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DEBUG_DRAWLINES\": () => (/* binding */ DEBUG_DRAWLINES),\n/* harmony export */   \"DEBUG_DRAWGRID\": () => (/* binding */ DEBUG_DRAWGRID)\n/* harmony export */ });\nvar DEBUG_DRAWLINES = true;\nvar DEBUG_DRAWGRID = true;\n\n//# sourceURL=webpack://boidiverse/./src/js/parameters.js?");

/***/ }),

/***/ "./src/js/shapes.js":
/*!**************************!*\
  !*** ./src/js/shapes.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"triangle\": () => (/* binding */ triangle)\n/* harmony export */ });\nvar triangle = function triangle(ctx) {\n  ctx.beginPath();\n  ctx.moveTo(-6.25, 0);\n  ctx.lineTo(0, -3.125);\n  ctx.lineTo(0, 3.125);\n  ctx.fill();\n};\n\n//# sourceURL=webpack://boidiverse/./src/js/shapes.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/js/main.js");
/******/ 	
/******/ })()
;