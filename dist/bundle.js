/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./lib/js/victor/index.js":
/*!********************************!*\
  !*** ./lib/js/victor/index.js ***!
  \********************************/
/***/ ((module, exports) => {

eval("exports = module.exports = Victor;\n/**\n * # Victor - A JavaScript 2D vector class with methods for common vector operations\n */\n\n/**\n * Constructor. Will also work without the `new` keyword\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = Victor(42, 1337);\n *\n * @param {Number} x Value of the x axis\n * @param {Number} y Value of the y axis\n * @return {Victor}\n * @api public\n */\n\nfunction Victor(x, y) {\n  if (!(this instanceof Victor)) {\n    return new Victor(x, y);\n  }\n  /**\n   * The X axis\n   *\n   * ### Examples:\n   *     var vec = new Victor.fromArray(42, 21);\n   *\n   *     vec.x;\n   *     // => 42\n   *\n   * @api public\n   */\n\n\n  this.x = x || 0;\n  /**\n   * The Y axis\n   *\n   * ### Examples:\n   *     var vec = new Victor.fromArray(42, 21);\n   *\n   *     vec.y;\n   *     // => 21\n   *\n   * @api public\n   */\n\n  this.y = y || 0;\n}\n\n;\n/**\n * # Static\n */\n\n/**\n * Creates a new instance from an array\n *\n * ### Examples:\n *     var vec = Victor.fromArray([42, 21]);\n *\n *     vec.toString();\n *     // => x:42, y:21\n *\n * @name Victor.fromArray\n * @param {Array} array Array with the x and y values at index 0 and 1 respectively\n * @return {Victor} The new instance\n * @api public\n */\n\nVictor.fromArray = function (arr) {\n  return new Victor(arr[0] || 0, arr[1] || 0);\n};\n/**\n * Creates a new instance from an object\n *\n * ### Examples:\n *     var vec = Victor.fromObject({ x: 42, y: 21 });\n *\n *     vec.toString();\n *     // => x:42, y:21\n *\n * @name Victor.fromObject\n * @param {Object} obj Object with the values for x and y\n * @return {Victor} The new instance\n * @api public\n */\n\n\nVictor.fromObject = function (obj) {\n  return new Victor(obj.x || 0, obj.y || 0);\n};\n/**\n * # Manipulation\n *\n * These functions are chainable.\n */\n\n/**\n * Adds another vector's X axis to this one\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = new Victor(20, 30);\n *\n *     vec1.addX(vec2);\n *     vec1.toString();\n *     // => x:30, y:10\n *\n * @param {Victor} vector The other vector you want to add to this one\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\n\n\nVictor.prototype.addX = function (vec) {\n  this.x += vec.x;\n  return this;\n};\n/**\n * Adds another vector's Y axis to this one\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = new Victor(20, 30);\n *\n *     vec1.addY(vec2);\n *     vec1.toString();\n *     // => x:10, y:40\n *\n * @param {Victor} vector The other vector you want to add to this one\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\n\n\nVictor.prototype.addY = function (vec) {\n  this.y += vec.y;\n  return this;\n};\n/**\n * Adds another vector to this one\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = new Victor(20, 30);\n *\n *     vec1.add(vec2);\n *     vec1.toString();\n *     // => x:30, y:40\n *\n * @param {Victor} vector The other vector you want to add to this one\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\n\n\nVictor.prototype.add = function (vec) {\n  this.x += vec.x;\n  this.y += vec.y;\n  return this;\n};\n/**\n * Adds the given scalar to both vector axis\n *\n * ### Examples:\n *     var vec = new Victor(1, 2);\n *\n *     vec.addScalar(2);\n *     vec.toString();\n *     // => x: 3, y: 4\n *\n * @param {Number} scalar The scalar to add\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\n\n\nVictor.prototype.addScalar = function (scalar) {\n  this.x += scalar;\n  this.y += scalar;\n  return this;\n};\n/**\n * Adds the given scalar to the X axis\n *\n * ### Examples:\n *     var vec = new Victor(1, 2);\n *\n *     vec.addScalarX(2);\n *     vec.toString();\n *     // => x: 3, y: 2\n *\n * @param {Number} scalar The scalar to add\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\n\n\nVictor.prototype.addScalarX = function (scalar) {\n  this.x += scalar;\n  return this;\n};\n/**\n * Adds the given scalar to the Y axis\n *\n * ### Examples:\n *     var vec = new Victor(1, 2);\n *\n *     vec.addScalarY(2);\n *     vec.toString();\n *     // => x: 1, y: 4\n *\n * @param {Number} scalar The scalar to add\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\n\n\nVictor.prototype.addScalarY = function (scalar) {\n  this.y += scalar;\n  return this;\n};\n/**\n * Subtracts the X axis of another vector from this one\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(20, 30);\n *\n *     vec1.subtractX(vec2);\n *     vec1.toString();\n *     // => x:80, y:50\n *\n * @param {Victor} vector The other vector you want subtract from this one\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\n\n\nVictor.prototype.subtractX = function (vec) {\n  this.x -= vec.x;\n  return this;\n};\n/**\n * Subtracts the Y axis of another vector from this one\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(20, 30);\n *\n *     vec1.subtractY(vec2);\n *     vec1.toString();\n *     // => x:100, y:20\n *\n * @param {Victor} vector The other vector you want subtract from this one\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\n\n\nVictor.prototype.subtractY = function (vec) {\n  this.y -= vec.y;\n  return this;\n};\n/**\n * Subtracts another vector from this one\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(20, 30);\n *\n *     vec1.subtract(vec2);\n *     vec1.toString();\n *     // => x:80, y:20\n *\n * @param {Victor} vector The other vector you want subtract from this one\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\n\n\nVictor.prototype.subtract = function (vec) {\n  this.x -= vec.x;\n  this.y -= vec.y;\n  return this;\n};\n/**\n * Subtracts the given scalar from both axis\n *\n * ### Examples:\n *     var vec = new Victor(100, 200);\n *\n *     vec.subtractScalar(20);\n *     vec.toString();\n *     // => x: 80, y: 180\n *\n * @param {Number} scalar The scalar to subtract\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\n\n\nVictor.prototype.subtractScalar = function (scalar) {\n  this.x -= scalar;\n  this.y -= scalar;\n  return this;\n};\n/**\n * Subtracts the given scalar from the X axis\n *\n * ### Examples:\n *     var vec = new Victor(100, 200);\n *\n *     vec.subtractScalarX(20);\n *     vec.toString();\n *     // => x: 80, y: 200\n *\n * @param {Number} scalar The scalar to subtract\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\n\n\nVictor.prototype.subtractScalarX = function (scalar) {\n  this.x -= scalar;\n  return this;\n};\n/**\n * Subtracts the given scalar from the Y axis\n *\n * ### Examples:\n *     var vec = new Victor(100, 200);\n *\n *     vec.subtractScalarY(20);\n *     vec.toString();\n *     // => x: 100, y: 180\n *\n * @param {Number} scalar The scalar to subtract\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\n\n\nVictor.prototype.subtractScalarY = function (scalar) {\n  this.y -= scalar;\n  return this;\n};\n/**\n * Divides the X axis by the x component of given vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     var vec2 = new Victor(2, 0);\n *\n *     vec.divideX(vec2);\n *     vec.toString();\n *     // => x:50, y:50\n *\n * @param {Victor} vector The other vector you want divide by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\n\n\nVictor.prototype.divideX = function (vector) {\n  this.x /= vector.x;\n  return this;\n};\n/**\n * Divides the Y axis by the y component of given vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     var vec2 = new Victor(0, 2);\n *\n *     vec.divideY(vec2);\n *     vec.toString();\n *     // => x:100, y:25\n *\n * @param {Victor} vector The other vector you want divide by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\n\n\nVictor.prototype.divideY = function (vector) {\n  this.y /= vector.y;\n  return this;\n};\n/**\n * Divides both vector axis by a axis values of given vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     var vec2 = new Victor(2, 2);\n *\n *     vec.divide(vec2);\n *     vec.toString();\n *     // => x:50, y:25\n *\n * @param {Victor} vector The vector to divide by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\n\n\nVictor.prototype.divide = function (vector) {\n  this.x /= vector.x;\n  this.y /= vector.y;\n  return this;\n};\n/**\n * Divides both vector axis by the given scalar value\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.divideScalar(2);\n *     vec.toString();\n *     // => x:50, y:25\n *\n * @param {Number} The scalar to divide by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\n\n\nVictor.prototype.divideScalar = function (scalar) {\n  if (scalar !== 0) {\n    this.x /= scalar;\n    this.y /= scalar;\n  } else {\n    this.x = 0;\n    this.y = 0;\n  }\n\n  return this;\n};\n/**\n * Divides the X axis by the given scalar value\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.divideScalarX(2);\n *     vec.toString();\n *     // => x:50, y:50\n *\n * @param {Number} The scalar to divide by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\n\n\nVictor.prototype.divideScalarX = function (scalar) {\n  if (scalar !== 0) {\n    this.x /= scalar;\n  } else {\n    this.x = 0;\n  }\n\n  return this;\n};\n/**\n * Divides the Y axis by the given scalar value\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.divideScalarY(2);\n *     vec.toString();\n *     // => x:100, y:25\n *\n * @param {Number} The scalar to divide by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\n\n\nVictor.prototype.divideScalarY = function (scalar) {\n  if (scalar !== 0) {\n    this.y /= scalar;\n  } else {\n    this.y = 0;\n  }\n\n  return this;\n};\n/**\n * Inverts the X axis\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.invertX();\n *     vec.toString();\n *     // => x:-100, y:50\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\n\n\nVictor.prototype.invertX = function () {\n  this.x *= -1;\n  return this;\n};\n/**\n * Inverts the Y axis\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.invertY();\n *     vec.toString();\n *     // => x:100, y:-50\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\n\n\nVictor.prototype.invertY = function () {\n  this.y *= -1;\n  return this;\n};\n/**\n * Inverts both axis\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.invert();\n *     vec.toString();\n *     // => x:-100, y:-50\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\n\n\nVictor.prototype.invert = function () {\n  this.invertX();\n  this.invertY();\n  return this;\n};\n/**\n * Multiplies the X axis by X component of given vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     var vec2 = new Victor(2, 0);\n *\n *     vec.multiplyX(vec2);\n *     vec.toString();\n *     // => x:200, y:50\n *\n * @param {Victor} vector The vector to multiply the axis with\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\n\n\nVictor.prototype.multiplyX = function (vector) {\n  this.x *= vector.x;\n  return this;\n};\n/**\n * Multiplies the Y axis by Y component of given vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     var vec2 = new Victor(0, 2);\n *\n *     vec.multiplyX(vec2);\n *     vec.toString();\n *     // => x:100, y:100\n *\n * @param {Victor} vector The vector to multiply the axis with\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\n\n\nVictor.prototype.multiplyY = function (vector) {\n  this.y *= vector.y;\n  return this;\n};\n/**\n * Multiplies both vector axis by values from a given vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     var vec2 = new Victor(2, 2);\n *\n *     vec.multiply(vec2);\n *     vec.toString();\n *     // => x:200, y:100\n *\n * @param {Victor} vector The vector to multiply by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\n\n\nVictor.prototype.multiply = function (vector) {\n  this.x *= vector.x;\n  this.y *= vector.y;\n  return this;\n};\n/**\n * Multiplies both vector axis by the given scalar value\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.multiplyScalar(2);\n *     vec.toString();\n *     // => x:200, y:100\n *\n * @param {Number} The scalar to multiply by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\n\n\nVictor.prototype.multiplyScalar = function (scalar) {\n  this.x *= scalar;\n  this.y *= scalar;\n  return this;\n};\n/**\n * Multiplies the X axis by the given scalar\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.multiplyScalarX(2);\n *     vec.toString();\n *     // => x:200, y:50\n *\n * @param {Number} The scalar to multiply the axis with\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\n\n\nVictor.prototype.multiplyScalarX = function (scalar) {\n  this.x *= scalar;\n  return this;\n};\n/**\n * Multiplies the Y axis by the given scalar\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.multiplyScalarY(2);\n *     vec.toString();\n *     // => x:100, y:100\n *\n * @param {Number} The scalar to multiply the axis with\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\n\n\nVictor.prototype.multiplyScalarY = function (scalar) {\n  this.y *= scalar;\n  return this;\n};\n/**\n * Normalize\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\n\n\nVictor.prototype.normalize = function () {\n  var length = this.length();\n\n  if (length === 0) {\n    this.x = 1;\n    this.y = 0;\n  } else {\n    this.divide(Victor(length, length));\n  }\n\n  return this;\n};\n\nVictor.prototype.norm = Victor.prototype.normalize;\n/**\n * If the absolute vector axis is greater than `max`, multiplies the axis by `factor`\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.limit(80, 0.9);\n *     vec.toString();\n *     // => x:90, y:50\n *\n * @param {Number} max The maximum value for both x and y axis\n * @param {Number} factor Factor by which the axis are to be multiplied with\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\n\nVictor.prototype.limit = function (max, factor) {\n  if (Math.abs(this.x) > max) {\n    this.x *= factor;\n  }\n\n  if (Math.abs(this.y) > max) {\n    this.y *= factor;\n  }\n\n  return this;\n};\n/**\n * Randomizes both vector axis with a value between 2 vectors\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.randomize(new Victor(50, 60), new Victor(70, 80`));\n *     vec.toString();\n *     // => x:67, y:73\n *\n * @param {Victor} topLeft first vector\n * @param {Victor} bottomRight second vector\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\n\n\nVictor.prototype.randomize = function (topLeft, bottomRight) {\n  this.randomizeX(topLeft, bottomRight);\n  this.randomizeY(topLeft, bottomRight);\n  return this;\n};\n/**\n * Randomizes the y axis with a value between 2 vectors\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.randomizeX(new Victor(50, 60), new Victor(70, 80`));\n *     vec.toString();\n *     // => x:55, y:50\n *\n * @param {Victor} topLeft first vector\n * @param {Victor} bottomRight second vector\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\n\n\nVictor.prototype.randomizeX = function (topLeft, bottomRight) {\n  var min = Math.min(topLeft.x, bottomRight.x);\n  var max = Math.max(topLeft.x, bottomRight.x);\n  this.x = random(min, max);\n  return this;\n};\n/**\n * Randomizes the y axis with a value between 2 vectors\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.randomizeY(new Victor(50, 60), new Victor(70, 80`));\n *     vec.toString();\n *     // => x:100, y:66\n *\n * @param {Victor} topLeft first vector\n * @param {Victor} bottomRight second vector\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\n\n\nVictor.prototype.randomizeY = function (topLeft, bottomRight) {\n  var min = Math.min(topLeft.y, bottomRight.y);\n  var max = Math.max(topLeft.y, bottomRight.y);\n  this.y = random(min, max);\n  return this;\n};\n/**\n * Randomly randomizes either axis between 2 vectors\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.randomizeAny(new Victor(50, 60), new Victor(70, 80));\n *     vec.toString();\n *     // => x:100, y:77\n *\n * @param {Victor} topLeft first vector\n * @param {Victor} bottomRight second vector\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\n\n\nVictor.prototype.randomizeAny = function (topLeft, bottomRight) {\n  if (!!Math.round(Math.random())) {\n    this.randomizeX(topLeft, bottomRight);\n  } else {\n    this.randomizeY(topLeft, bottomRight);\n  }\n\n  return this;\n};\n/**\n * Rounds both axis to an integer value\n *\n * ### Examples:\n *     var vec = new Victor(100.2, 50.9);\n *\n *     vec.unfloat();\n *     vec.toString();\n *     // => x:100, y:51\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\n\n\nVictor.prototype.unfloat = function () {\n  this.x = Math.round(this.x);\n  this.y = Math.round(this.y);\n  return this;\n};\n/**\n * Rounds both axis to a certain precision\n *\n * ### Examples:\n *     var vec = new Victor(100.2, 50.9);\n *\n *     vec.unfloat();\n *     vec.toString();\n *     // => x:100, y:51\n *\n * @param {Number} Precision (default: 8)\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\n\n\nVictor.prototype.toFixed = function (precision) {\n  if (typeof precision === 'undefined') {\n    precision = 8;\n  }\n\n  this.x = this.x.toFixed(precision);\n  this.y = this.y.toFixed(precision);\n  return this;\n};\n/**\n * Performs a linear blend / interpolation of the X axis towards another vector\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 100);\n *     var vec2 = new Victor(200, 200);\n *\n *     vec1.mixX(vec2, 0.5);\n *     vec.toString();\n *     // => x:150, y:100\n *\n * @param {Victor} vector The other vector\n * @param {Number} amount The blend amount (optional, default: 0.5)\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\n\n\nVictor.prototype.mixX = function (vec, amount) {\n  if (typeof amount === 'undefined') {\n    amount = 0.5;\n  }\n\n  this.x = (1 - amount) * this.x + amount * vec.x;\n  return this;\n};\n/**\n * Performs a linear blend / interpolation of the Y axis towards another vector\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 100);\n *     var vec2 = new Victor(200, 200);\n *\n *     vec1.mixY(vec2, 0.5);\n *     vec.toString();\n *     // => x:100, y:150\n *\n * @param {Victor} vector The other vector\n * @param {Number} amount The blend amount (optional, default: 0.5)\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\n\n\nVictor.prototype.mixY = function (vec, amount) {\n  if (typeof amount === 'undefined') {\n    amount = 0.5;\n  }\n\n  this.y = (1 - amount) * this.y + amount * vec.y;\n  return this;\n};\n/**\n * Performs a linear blend / interpolation towards another vector\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 100);\n *     var vec2 = new Victor(200, 200);\n *\n *     vec1.mix(vec2, 0.5);\n *     vec.toString();\n *     // => x:150, y:150\n *\n * @param {Victor} vector The other vector\n * @param {Number} amount The blend amount (optional, default: 0.5)\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\n\n\nVictor.prototype.mix = function (vec, amount) {\n  this.mixX(vec, amount);\n  this.mixY(vec, amount);\n  return this;\n};\n/**\n * # Products\n */\n\n/**\n * Creates a clone of this vector\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = vec1.clone();\n *\n *     vec2.toString();\n *     // => x:10, y:10\n *\n * @return {Victor} A clone of the vector\n * @api public\n */\n\n\nVictor.prototype.clone = function () {\n  return new Victor(this.x, this.y);\n};\n/**\n * Copies another vector's X component in to its own\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = new Victor(20, 20);\n *     var vec2 = vec1.copyX(vec1);\n *\n *     vec2.toString();\n *     // => x:20, y:10\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\n\n\nVictor.prototype.copyX = function (vec) {\n  this.x = vec.x;\n  return this;\n};\n/**\n * Copies another vector's Y component in to its own\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = new Victor(20, 20);\n *     var vec2 = vec1.copyY(vec1);\n *\n *     vec2.toString();\n *     // => x:10, y:20\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\n\n\nVictor.prototype.copyY = function (vec) {\n  this.y = vec.y;\n  return this;\n};\n/**\n * Copies another vector's X and Y components in to its own\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = new Victor(20, 20);\n *     var vec2 = vec1.copy(vec1);\n *\n *     vec2.toString();\n *     // => x:20, y:20\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\n\n\nVictor.prototype.copy = function (vec) {\n  this.copyX(vec);\n  this.copyY(vec);\n  return this;\n};\n/**\n * Sets the vector to zero (0,0)\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *\t\t var1.zero();\n *     vec1.toString();\n *     // => x:0, y:0\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\n\n\nVictor.prototype.zero = function () {\n  this.x = this.y = 0;\n  return this;\n};\n/**\n * Calculates the dot product of this vector and another\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.dot(vec2);\n *     // => 23000\n *\n * @param {Victor} vector The second vector\n * @return {Number} Dot product\n * @api public\n */\n\n\nVictor.prototype.dot = function (vec2) {\n  return this.x * vec2.x + this.y * vec2.y;\n};\n\nVictor.prototype.cross = function (vec2) {\n  return this.x * vec2.y - this.y * vec2.x;\n};\n/**\n * Projects a vector onto another vector, setting itself to the result.\n *\n * ### Examples:\n *     var vec = new Victor(100, 0);\n *     var vec2 = new Victor(100, 100);\n *\n *     vec.projectOnto(vec2);\n *     vec.toString();\n *     // => x:50, y:50\n *\n * @param {Victor} vector The other vector you want to project this vector onto\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\n\n\nVictor.prototype.projectOnto = function (vec2) {\n  var coeff = (this.x * vec2.x + this.y * vec2.y) / (vec2.x * vec2.x + vec2.y * vec2.y);\n  this.x = coeff * vec2.x;\n  this.y = coeff * vec2.y;\n  return this;\n};\n\nVictor.prototype.horizontalAngle = function () {\n  return Math.atan2(this.y, this.x);\n};\n\nVictor.prototype.horizontalAngleDeg = function () {\n  return radian2degrees(this.horizontalAngle());\n};\n\nVictor.prototype.verticalAngle = function () {\n  return Math.atan2(this.x, this.y);\n};\n\nVictor.prototype.verticalAngleDeg = function () {\n  return radian2degrees(this.verticalAngle());\n};\n\nVictor.prototype.angle = Victor.prototype.horizontalAngle;\nVictor.prototype.angleDeg = Victor.prototype.horizontalAngleDeg;\nVictor.prototype.direction = Victor.prototype.horizontalAngle;\n\nVictor.prototype.rotate = function (angle) {\n  var nx = this.x * Math.cos(angle) - this.y * Math.sin(angle);\n  var ny = this.x * Math.sin(angle) + this.y * Math.cos(angle);\n  this.x = nx;\n  this.y = ny;\n  return this;\n};\n\nVictor.prototype.rotateDeg = function (angle) {\n  angle = degrees2radian(angle);\n  return this.rotate(angle);\n};\n\nVictor.prototype.rotateTo = function (rotation) {\n  return this.rotate(rotation - this.angle());\n};\n\nVictor.prototype.rotateToDeg = function (rotation) {\n  rotation = degrees2radian(rotation);\n  return this.rotateTo(rotation);\n};\n\nVictor.prototype.rotateBy = function (rotation) {\n  var angle = this.angle() + rotation;\n  return this.rotate(angle);\n};\n\nVictor.prototype.rotateByDeg = function (rotation) {\n  rotation = degrees2radian(rotation);\n  return this.rotateBy(rotation);\n};\n/**\n * Calculates the distance of the X axis between this vector and another\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.distanceX(vec2);\n *     // => -100\n *\n * @param {Victor} vector The second vector\n * @return {Number} Distance\n * @api public\n */\n\n\nVictor.prototype.distanceX = function (vec) {\n  return this.x - vec.x;\n};\n/**\n * Same as `distanceX()` but always returns an absolute number\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.absDistanceX(vec2);\n *     // => 100\n *\n * @param {Victor} vector The second vector\n * @return {Number} Absolute distance\n * @api public\n */\n\n\nVictor.prototype.absDistanceX = function (vec) {\n  return Math.abs(this.distanceX(vec));\n};\n/**\n * Calculates the distance of the Y axis between this vector and another\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.distanceY(vec2);\n *     // => -10\n *\n * @param {Victor} vector The second vector\n * @return {Number} Distance\n * @api public\n */\n\n\nVictor.prototype.distanceY = function (vec) {\n  return this.y - vec.y;\n};\n/**\n * Same as `distanceY()` but always returns an absolute number\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.distanceY(vec2);\n *     // => 10\n *\n * @param {Victor} vector The second vector\n * @return {Number} Absolute distance\n * @api public\n */\n\n\nVictor.prototype.absDistanceY = function (vec) {\n  return Math.abs(this.distanceY(vec));\n};\n/**\n * Calculates the euclidean distance between this vector and another\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.distance(vec2);\n *     // => 100.4987562112089\n *\n * @param {Victor} vector The second vector\n * @return {Number} Distance\n * @api public\n */\n\n\nVictor.prototype.distance = function (vec) {\n  return Math.sqrt(this.distanceSq(vec));\n};\n/**\n * Calculates the squared euclidean distance between this vector and another\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.distanceSq(vec2);\n *     // => 10100\n *\n * @param {Victor} vector The second vector\n * @return {Number} Distance\n * @api public\n */\n\n\nVictor.prototype.distanceSq = function (vec) {\n  var dx = this.distanceX(vec),\n      dy = this.distanceY(vec);\n  return dx * dx + dy * dy;\n};\n/**\n * Calculates the length or magnitude of the vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.length();\n *     // => 111.80339887498948\n *\n * @return {Number} Length / Magnitude\n * @api public\n */\n\n\nVictor.prototype.length = function () {\n  return Math.sqrt(this.lengthSq());\n};\n/**\n * Squared length / magnitude\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.lengthSq();\n *     // => 12500\n *\n * @return {Number} Length / Magnitude\n * @api public\n */\n\n\nVictor.prototype.lengthSq = function () {\n  return this.x * this.x + this.y * this.y;\n};\n\nVictor.prototype.magnitude = Victor.prototype.length;\n/**\n * Returns a true if vector is (0, 0)\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     vec.zero();\n *\n *     // => true\n *\n * @return {Boolean}\n * @api public\n */\n\nVictor.prototype.isZero = function () {\n  return this.x === 0 && this.y === 0;\n};\n/**\n * Returns a true if this vector is the same as another\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(100, 50);\n *     vec1.isEqualTo(vec2);\n *\n *     // => true\n *\n * @return {Boolean}\n * @api public\n */\n\n\nVictor.prototype.isEqualTo = function (vec2) {\n  return this.x === vec2.x && this.y === vec2.y;\n};\n/**\n * # Utility Methods\n */\n\n/**\n * Returns an string representation of the vector\n *\n * ### Examples:\n *     var vec = new Victor(10, 20);\n *\n *     vec.toString();\n *     // => x:10, y:20\n *\n * @return {String}\n * @api public\n */\n\n\nVictor.prototype.toString = function () {\n  return 'x:' + this.x + ', y:' + this.y;\n};\n/**\n * Returns an array representation of the vector\n *\n * ### Examples:\n *     var vec = new Victor(10, 20);\n *\n *     vec.toArray();\n *     // => [10, 20]\n *\n * @return {Array}\n * @api public\n */\n\n\nVictor.prototype.toArray = function () {\n  return [this.x, this.y];\n};\n/**\n * Returns an object representation of the vector\n *\n * ### Examples:\n *     var vec = new Victor(10, 20);\n *\n *     vec.toObject();\n *     // => { x: 10, y: 20 }\n *\n * @return {Object}\n * @api public\n */\n\n\nVictor.prototype.toObject = function () {\n  return {\n    x: this.x,\n    y: this.y\n  };\n};\n\nvar degrees = 180 / Math.PI;\n\nfunction random(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction radian2degrees(rad) {\n  return rad * degrees;\n}\n\nfunction degrees2radian(deg) {\n  return deg / degrees;\n}\n\n//# sourceURL=webpack://boidiverse/./lib/js/victor/index.js?");

/***/ }),

/***/ "./src/js/boids.js":
/*!*************************!*\
  !*** ./src/js/boids.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _lib_js_victor_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/js/victor/index */ \"./lib/js/victor/index.js\");\n/* harmony import */ var _lib_js_victor_index__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_lib_js_victor_index__WEBPACK_IMPORTED_MODULE_0__);\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n\nvar vec = new (_lib_js_victor_index__WEBPACK_IMPORTED_MODULE_0___default())(42, 1337);\nvec.add(new (_lib_js_victor_index__WEBPACK_IMPORTED_MODULE_0___default())(2, 0));\nconsole.log(vec);\nvar DEBUG_SHOWGRID = false;\nvar DEBUG_SHOWLINES = true;\nvar DEBUG_GENERATEDBOID_AMOUNT = 1000;\nvar DEBUG_CHUNKSIZE = 50; //Distanz die bestimmt welchen boids gefolgt wird\n\nvar DEBUG_MAX_SWARM_DISTANCE = 100; //alle Boids innerhalb dieser Distanz und außerhalb der DEBUG_MAX_SCHWARM_DISTANCE werden gemieden\n\nvar DEBUG_MAX_CHECK_DISTANCE = 125;\nvar DEBUG_SPEED = 0;\nvar DEBUG_TURN_SPEED = 50;\nvar BOID_IDS = 0;\n\nvar degToRad = function degToRad(deg) {\n  return deg * Math.PI / 180;\n};\n\nvar radToDeg = function radToDeg(rad) {\n  return rad * (180 / Math.PI);\n};\n\nvar distance = function distance(x1, y1, x2, y2) {\n  return Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));\n};\n\nvar stayIn360Deg = function stayIn360Deg(deg) {\n  return deg >= 360 ? stayIn360Deg(deg - 360.0) : deg < 0 ? stayIn360Deg(deg + 360.0) : deg;\n};\n\nvar CanvasBoids = function CanvasBoids(canvas) {\n  this.init = function (canvas_width, canvas_height) {\n    _this.cw = canvas_width;\n    _this.ch = canvas_height;\n    _this.canvas.width = _this.cw;\n    _this.canvas.height = _this.ch;\n\n    _this.boidiverse.chunkgrid.buildChunks(_this.cw, _this.ch); //_this.boidiverse.generateBoids(DEBUG_GENERATEDBOID_AMOUNT,_this.cw, _this.ch);\n\n\n    _this.boidiverse.addChunkedBoid(_this.boidiverse.chunkBoid(new Boid(200, 200, 90))); //_this.boidiverse.addChunkedBoid(_this.boidiverse.chunkBoid(new Boid(200, 250, 90)));\n    //_this.boidiverse.addChunkedBoid(_this.boidiverse.chunkBoid(new Boid(250, 225, 90)));\n\n\n    var bob = new Boid(100, 100, 270);\n    bob.id = 6;\n    bob.speed_x = -10;\n\n    _this.boidiverse.addChunkedBoid(_this.boidiverse.chunkBoid(bob));\n\n    var klop = new Boid(300, 100, 270);\n    klop.id = 5;\n    klop.speed_x = -10;\n\n    _this.boidiverse.addChunkedBoid(_this.boidiverse.chunkBoid(klop));\n\n    var eva = new Boid(100, 300, 90);\n    eva.id = 7;\n    eva.speed_x = -10;\n\n    _this.boidiverse.addChunkedBoid(_this.boidiverse.chunkBoid(eva));\n\n    var basti = new Boid(300, 300, 90);\n    basti.id = 8;\n    basti.speed_x = -10;\n\n    _this.boidiverse.addChunkedBoid(_this.boidiverse.chunkBoid(basti));\n\n    this.loop();\n  };\n\n  var _this = this;\n\n  this.canvas = canvas;\n  this.ctx = this.canvas.getContext(\"2d\");\n  this.stop = false;\n  this.cw = 0;\n  this.ch = 0;\n  this.boidiverse = new Boidiverse();\n\n  this.loop = function () {\n    var lastTime;\n    var requiredElapsed = 1000 / 60;\n\n    var loopIt = function loopIt(now) {\n      if (_this.stop) {\n        return;\n      }\n\n      requestAnimationFrame(loopIt);\n\n      if (!lastTime) {\n        lastTime = now;\n      }\n\n      var elapsed = now - lastTime;\n\n      if (elapsed > requiredElapsed) {\n        var timedelta = elapsed / 1000;\n\n        _this.updateBounds();\n\n        _this.clearCanvas();\n\n        _this.updateBoidiverse(timedelta);\n\n        _this.drawBoidiverse();\n\n        lastTime = now;\n      }\n    };\n\n    loopIt();\n  };\n\n  this.updateBounds = function () {\n    if (window.innerWidth !== _this.cw || window.innerHeight !== _this.ch) {\n      _this.cw = window.innerWidth;\n      _this.ch = window.innerHeight;\n      _this.canvas.width = _this.cw;\n      _this.canvas.height = _this.ch;\n\n      _this.boidiverse.chunkgrid.buildChunks(_this.cw, _this.ch);\n    }\n  };\n\n  this.clearCanvas = function () {\n    _this.ctx.globalCompositeOperation = 'destination-over';\n\n    _this.ctx.clearRect(0, 0, _this.cw, _this.ch); // clear canvas\n\n  };\n\n  _this.keepBoidInsideBounds = function (chunkedBoid) {\n    if (chunkedBoid.boid.x < 0) {\n      chunkedBoid.boid.x = _this.cw;\n    } else if (chunkedBoid.boid.x > _this.cw) {\n      chunkedBoid.boid.x = 0;\n    }\n\n    if (chunkedBoid.boid.y < 0) {\n      chunkedBoid.boid.y = _this.ch;\n    } else if (chunkedBoid.boid.y > _this.ch) {\n      chunkedBoid.boid.y = 0;\n    }\n  };\n\n  this.updateBoidiverse = function (timeDelta) {\n    _this.boidiverse.forEachBoid(function (chunkedBoid) {\n      var nearBoids = _this.boidiverse.getNearbyChunkedBoids(chunkedBoid, DEBUG_MAX_CHECK_DISTANCE);\n\n      var swarmBoids = nearBoids.filter(function (chunkedBoidWithDis) {\n        return chunkedBoidWithDis.distance <= DEBUG_MAX_SWARM_DISTANCE;\n      });\n      var nonSwarmBoids = nearBoids.filter(function (chunkedBoidWithDis) {\n        return !swarmBoids.includes(chunkedBoidWithDis);\n      }); //Boid main direction alignment\n\n      var angleSum = chunkedBoid.boid.dir;\n      var count = 1; //Goal direction alignment\n\n      if (chunkedBoid.boid.goalDir !== undefined) {\n        angleSum += stayIn360Deg(chunkedBoid.boid.goalDir) * chunkedBoid.boid.goalDir_weight;\n        count += chunkedBoid.boid.goalDir_weight;\n      } //Swarm direction alignment\n      //Goal: form a swarm with all nearby boids\n\n\n      var maxDebuglinesPerBoid = {\n        num: 10\n      };\n\n      var _iterator = _createForOfIteratorHelper(swarmBoids),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _distanedChunkedBoid = _step.value;\n\n          _this.drawDebugLines(chunkedBoid.boid.x, chunkedBoid.boid.y, _distanedChunkedBoid.chunkedBoid.boid.x, _distanedChunkedBoid.chunkedBoid.boid.y, maxDebuglinesPerBoid);\n\n          angleSum += stayIn360Deg(_distanedChunkedBoid.chunkedBoid.boid.dir);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      count += swarmBoids.length; //NonSwarm seperation\n      //Goal: move away from all boids that are not part of the swarm\n\n      if (nonSwarmBoids.length > 0) {\n        var centroid_x = 0;\n        var centroid_y = 0;\n        maxDebuglinesPerBoid = {\n          num: 10\n        };\n        _this.ctx.strokeStyle = \"red\";\n\n        var _iterator2 = _createForOfIteratorHelper(nonSwarmBoids),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var distanedChunkedBoid = _step2.value;\n\n            _this.drawDebugLines(chunkedBoid.boid.x, chunkedBoid.boid.y, distanedChunkedBoid.chunkedBoid.boid.x, distanedChunkedBoid.chunkedBoid.boid.y, maxDebuglinesPerBoid);\n\n            centroid_x += distanedChunkedBoid.chunkedBoid.boid.x;\n            centroid_y += distanedChunkedBoid.chunkedBoid.boid.y;\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n\n        _this.ctx.strokeStyle = \"black\";\n        centroid_x = centroid_x / nonSwarmBoids.length;\n        centroid_y = centroid_y / nonSwarmBoids.length;\n        var akt_dir_x = Math.sin(degToRad(chunkedBoid.boid.dir) - 0.5 * Math.PI);\n        var akt_dir_y = -Math.cos(degToRad(chunkedBoid.boid.dir) - 0.5 * Math.PI);\n        var moveVector_x = (centroid_x - chunkedBoid.boid.x) * -1;\n        var moveVector_y = (centroid_y - chunkedBoid.boid.y) * -1;\n        var moveVector_angle = radToDeg(Math.acos((akt_dir_x * moveVector_x + akt_dir_y * moveVector_y) / (Math.sqrt(Math.pow(akt_dir_x, 2) + Math.pow(akt_dir_y, 2)) * Math.sqrt(Math.pow(moveVector_x, 2) + Math.pow(moveVector_y, 2)))));\n        var direction = Math.atan(akt_dir_y / akt_dir_x) - Math.atan(moveVector_y / moveVector_x) > 0 ? 1 : -1;\n\n        if (direction === -1) {\n          moveVector_angle = 360 - moveVector_angle;\n        }\n\n        if (chunkedBoid.boid.id === 5) {\n          console.log(\"akt_dir: \" + akt_dir_x + \" \" + akt_dir_y);\n          console.log(\"test: \" + moveVector_angle);\n          console.log(\"test direc: \" + direction);\n        }\n\n        angleSum += moveVector_angle - chunkedBoid.boid.dir;\n        count += 1;\n\n        if (chunkedBoid.boid.id === 5 || chunkedBoid.boid.id === 6) {\n          _this.drawDebugLines(chunkedBoid.boid.x, chunkedBoid.boid.y, chunkedBoid.boid.x + moveVector_x, chunkedBoid.boid.y + moveVector_y, {\n            num: 1\n          }, true);\n        }\n      }\n\n      var desired_direction = angleSum / count; // turn the Boid towards the desired direction\n\n      _this.boidiverse.turnBoidTo(chunkedBoid, desired_direction, timeDelta); // move Boid forward and keep the Boid inside the canvas Bounds\n\n\n      _this.boidiverse.moveBoidForward(chunkedBoid, timeDelta);\n\n      _this.keepBoidInsideBounds(chunkedBoid);\n    });\n  };\n\n  this.drawDebugLines = function (x1, y1, x2, y2, maxDebuglinesPerBoid) {\n    var important = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n\n    if ((DEBUG_SHOWLINES || important) && maxDebuglinesPerBoid.num > 0) {\n      _this.ctx.lineWidth = 0.1;\n\n      _this.ctx.beginPath();\n\n      _this.ctx.moveTo(x1, y1);\n\n      _this.ctx.lineTo(x2, y2);\n\n      _this.ctx.stroke();\n\n      _this.ctx.lineWidth = 1;\n      maxDebuglinesPerBoid.num--;\n    }\n  };\n\n  this.drawBoidiverse = function () {\n    _this.boidiverse.forEachBoid(function (chunkedBoid) {\n      _this.ctx.translate(chunkedBoid.boid.x, chunkedBoid.boid.y);\n\n      _this.ctx.rotate(degToRad(chunkedBoid.boid.dir));\n\n      switch (chunkedBoid.boid.shape) {\n        case \"triangle\":\n          //_this.ctx.fillStyle = chunkedBoid.boid.color;\n          _this.drawTriangleShape(_this.ctx); //_this.ctx.fillStyle = \"#000000\";\n\n\n          break;\n      }\n\n      _this.ctx.setTransform(1, 0, 0, 1, 0, 0); // reset transformation\n\n    });\n\n    if (DEBUG_SHOWGRID === true) {\n      _this.boidiverse.chunkgrid.drawChunkGrid(_this.ctx);\n    }\n  };\n\n  this.drawTriangleShape = function (ctx) {\n    ctx.beginPath();\n    ctx.moveTo(-6.25, 0);\n    ctx.lineTo(0, -3.125);\n    ctx.lineTo(0, 3.125);\n    ctx.fill();\n  };\n};\n\nvar Boidiverse = function Boidiverse() {\n  this.init = function () {};\n\n  var _this = this;\n\n  this.chunkedBoids = new Map();\n  console.log(this.chunkedBoids);\n  this.chunkgrid = new ChunkGrid();\n\n  this.forEachBoid = function (chunkedBoidFunction) {\n    var _iterator3 = _createForOfIteratorHelper(_this.chunkedBoids.values()),\n        _step3;\n\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var chunkedBoid = _step3.value;\n        chunkedBoidFunction(chunkedBoid);\n      }\n      /*for (let x = 0; x < _this.chunkgrid.chunks.length; x++) {\n          for (let y = 0; y < _this.chunkgrid.chunks[x].length; y++) {\n              for (let i = 0; i < _this.chunkgrid.chunks[x][y].length; i++) {\n                  boidFunction(_this.chunkgrid.chunks[x][y][i]);\n              }\n          }\n      }*/\n\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n  };\n\n  this.chunkBoid = function (boidToChunk) {\n    return {\n      boid: boidToChunk,\n      grid_x: Math.floor(boidToChunk.x / _this.chunkgrid.chunkSize),\n      grid_y: Math.floor(boidToChunk.y / _this.chunkgrid.chunkSize)\n    };\n  };\n\n  this.addChunkedBoid = function (chunkedBoid) {\n    _this.chunkedBoids.set(chunkedBoid.boid.id, chunkedBoid);\n\n    _this.chunkgrid.pushOnChunk(chunkedBoid.boid.id, chunkedBoid.grid_x, chunkedBoid.grid_y);\n  };\n\n  this.removeChunkedBoid = function (chunkedBoid) {\n    _this.chunkedBoids[\"delete\"](chunkedBoid.boid.id);\n\n    _this.chunkgrid.removeFromChunk(chunkedBoid.boid.id, chunkedBoid.grid_x, chunkedBoid.grid_y);\n  };\n\n  this.generateBoids = function (amount, max_width, max_height) {\n    for (var i = 0; i < amount; i++) {\n      var b = new Boid(Math.random() * max_width, Math.random() * max_height, Math.random() * 360);\n      b.speed_x = DEBUG_SPEED;\n      var rand = Math.random();\n      /*b.goalDir_weight = Math.random() * 10;\n      if(rand <= 0.125) {\n          b.goalDir = 0;\n          b.color = \"#ff0000\"\n      } else if(rand <= 0.25) {\n          b.goalDir = 90;\n          b.color = \"#0037ff\"\n      } else {\n          b.goalDir_weight = 0;\n      }*/\n\n      _this.addChunkedBoid(_this.chunkBoid(b));\n    }\n  };\n\n  this.moveBoidForward = function (chunkedBoid, timeDelta) {\n    var old_grid_x = chunkedBoid.grid_x;\n    var old_grid_y = chunkedBoid.grid_y;\n    chunkedBoid.boid.moveForward(timeDelta);\n    chunkedBoid.grid_x = Math.floor(chunkedBoid.boid.x / _this.chunkgrid.chunkSize);\n    chunkedBoid.grid_y = Math.floor(chunkedBoid.boid.y / _this.chunkgrid.chunkSize);\n\n    if (old_grid_x !== chunkedBoid.grid_x || old_grid_y !== chunkedBoid.grid_y) {\n      _this.chunkgrid.removeFromChunk(chunkedBoid.boid.id, old_grid_x, old_grid_y);\n\n      _this.chunkgrid.pushOnChunk(chunkedBoid.boid.id, chunkedBoid.grid_x, chunkedBoid.grid_y);\n    }\n  };\n\n  this.turnBoidTo = function (chunkedBoid, new_dir, timeDelta) {\n    var wa360 = 360 - (chunkedBoid.boid.dir - new_dir);\n    var wa0 = chunkedBoid.boid.dir - new_dir;\n\n    if (chunkedBoid.boid.id === 5 && wa360 !== 360) {\n      console.log(wa360 + \" vs \" + wa0);\n    }\n\n    var direction;\n    var direction_wa;\n\n    if (wa360 < wa0) {\n      direction = -1;\n      direction_wa = wa360;\n    } else {\n      direction = 1;\n      direction_wa = wa0;\n    }\n\n    if (chunkedBoid.boid.id === 5 && wa360 !== 360) {\n      console.log(\"direction: \" + direction);\n      console.log(\"wa: \" + direction_wa);\n    }\n\n    if (Math.abs(direction_wa) >= 5) {\n      //chunkedBoid.boid.dir = chunkedBoid.boid.dir + ((DEBUG_TURN_SPEED * (dir_dis / Math.abs(dir_dis) * timeDelta)));\n      chunkedBoid.boid.turnTo(DEBUG_TURN_SPEED * direction * timeDelta);\n    }\n  };\n\n  this.getNearbyChunkedBoids = function (chunkedBoid, maxDistance) {\n    var arr = [];\n    var overflow = Math.ceil(maxDistance / _this.chunkgrid.chunkSize);\n\n    for (var x = 0 - (overflow - 1); x <= 2 + (overflow - 1); x++) {\n      for (var y = 0 - (overflow - 1); y <= 2 + (overflow - 1); y++) {\n        var c_x = chunkedBoid.grid_x - 1 + x;\n        var c_y = chunkedBoid.grid_y - 1 + y;\n\n        if (c_x >= 0 && c_x < _this.chunkgrid.chunks.length && c_y >= 0 && c_y < _this.chunkgrid.chunks[c_x].length) {\n          var _iterator4 = _createForOfIteratorHelper(_this.chunkgrid.chunks[c_x][c_y]),\n              _step4;\n\n          try {\n            for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n              var boidId = _step4.value;\n\n              if (boidId !== chunkedBoid.boid.id) {\n                var boid_comp = _this.chunkedBoids.get(boidId);\n\n                var dis = distance(chunkedBoid.boid.x, chunkedBoid.boid.y, boid_comp.boid.x, boid_comp.boid.y);\n\n                if (dis <= maxDistance) {\n                  arr.push({\n                    chunkedBoid: boid_comp,\n                    distance: dis\n                  });\n                }\n              }\n            }\n          } catch (err) {\n            _iterator4.e(err);\n          } finally {\n            _iterator4.f();\n          }\n        }\n      }\n    }\n\n    return arr;\n  };\n};\n\nvar ChunkGrid = function ChunkGrid() {\n  this.init = function () {};\n\n  var _this = this;\n\n  this.chunks = [];\n  this.chunkSize = DEBUG_CHUNKSIZE;\n\n  this.buildChunks = function (canvas_width, canvas_height) {\n    _this.chunks = [];\n\n    for (var x = 0; x < canvas_width / _this.chunkSize; x++) {\n      var y_line = [];\n\n      for (var y = 0; y < canvas_height / _this.chunkSize; y++) {\n        y_line.push([]);\n      }\n\n      _this.chunks.push(y_line);\n    }\n\n    console.log(_this.chunks);\n  };\n\n  this.drawChunkGrid = function (ctx) {\n    for (var x = 0; x < _this.chunks.length; x++) {\n      for (var y = 0; y < _this.chunks[x].length; y++) {\n        ctx.translate(_this.chunkSize * x, _this.chunkSize * y);\n        ctx.beginPath();\n        ctx.moveTo(0, 0);\n        ctx.lineTo(0, _this.chunkSize);\n        ctx.lineTo(_this.chunkSize, _this.chunkSize);\n        ctx.lineTo(_this.chunkSize, 0);\n        ctx.stroke();\n        ctx.fillText(\"c: \" + _this.chunks[x][y].length, 5, 15);\n        ctx.setTransform(1, 0, 0, 1, 0, 0); // reset transformation\n      }\n    }\n  };\n\n  this.removeFromChunk = function (positionable, grid_x, grid_y) {\n    if (_this.chunks[grid_x] === undefined || _this.chunks[grid_x][grid_y] === undefined) {} else {\n      var b_index = _this.chunks[grid_x][grid_y].findIndex(function (e) {\n        return e.id === positionable.id;\n      });\n\n      if (b_index > -1) {\n        _this.chunks[grid_x][grid_y].splice(b_index, 1);\n      }\n    }\n  };\n\n  this.pushOnChunk = function (positionable, grid_x, grid_y) {\n    if (_this.chunks[grid_x] === undefined || _this.chunks[grid_x][grid_y] === undefined) {} else {\n      _this.chunks[grid_x][grid_y].push(positionable);\n    }\n  };\n\n  this.updateChunk = function () {};\n};\n\nvar Boid = function Boid(x, y, dir) {\n  this.init = function () {};\n\n  var _this = this;\n\n  this.id = BOID_IDS++;\n  this.x = x;\n  this.y = y;\n  this.speed_x = 0;\n  this.speed_y = 0;\n  this.goalDir = undefined;\n  this.goalDir_weight = undefined;\n  this.dir = stayIn360Deg(dir);\n  this.color = \"#000000\";\n  this.shape = \"triangle\";\n\n  this.moveForward = function (timeDelta) {\n    var dis_x = timeDelta * _this.speed_x;\n    var dis_y = timeDelta * _this.speed_y;\n    var bs_x = Math.cos(degToRad(_this.dir)) * dis_x + -Math.sin(degToRad(_this.dir)) * dis_y;\n    var bs_y = Math.sin(degToRad(_this.dir)) * dis_x + Math.cos(degToRad(_this.dir)) * dis_y;\n    _this.x = _this.x + bs_x;\n    _this.y = _this.y + bs_y;\n  };\n\n  this.turnTo = function (dir) {\n    _this.dir = _this.dir + dir;\n  };\n};\n\nvar Point = function Point(x, y) {};\n\nvar init = function init() {\n  var boids_div = document.getElementById(\"boids-js\");\n  var can = document.createElement(\"canvas\");\n  can.id = \"boids-js-canvas\";\n  boids_div.appendChild(can);\n  var cb = new CanvasBoids(can);\n  cb.init(window.innerWidth, window.innerHeight);\n};\n\ninit();\n\n//# sourceURL=webpack://boidiverse/./src/js/boids.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/js/boids.js");
/******/ 	
/******/ })()
;